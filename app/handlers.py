from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import math

import app.database.sqlite_db as sql
import app.keyboards as kb

router = Router()


class AddTasks(StatesGroup):
    title = State()

class AddOneTask(StatesGroup):
    title = State()

@router.message(Command('start'))
async def command_start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('üëã–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –≤–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–∂–µ—Ç —É–¥–æ–±–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–Ω—è.\n\n‚òÑ–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n-–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–Ω—è\n-–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n-–§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\nüìã–ü–æ–¥—Ä–æ–±–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /help\n\n‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @TaskMasterSupportBot\n\nüë®‚Äçüíª–ù–∞—à –∫–∞–Ω–∞–ª, –≥–¥–µ –≤—ã—Ö–æ–¥—è—Ç —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: @BestTaskMaster', reply_markup=kb.client_reply_keyboards)
    data = await sql.get_all_id_users_sql()
    if str(message.from_user.id) not in data:
        await sql.add_client_sql(message.from_user.id)


@router.message(Command('help'))
async def command_help_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('üóí–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n‚úè–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π:\n–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –≤—ã –º–æ–∂–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–¥–µ–ª–∞–ª–∏, —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è. –¢–∞–∫–∂–µ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –∑–∞–¥–∞–Ω–∏–µ, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ, –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è\n\nüìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≥–¥–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤—Å–µ–≥–æ, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–∫–∏–µ –¥–Ω–∏, –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã –¥–µ–ª–∞–ª–∏, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.')


@router.message(F.text == 'üìñ–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è')
async def create_tasks_handler(message: Message, state: FSMContext):
    await state.clear()
    global tasks_ls 
    tasks_ls = []
    aval_table = await sql.availability_of_table(message.from_user.id)
    if aval_table == 'no':
        await message.answer('‚ÄºÔ∏è–ü–∏—à–∏—Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É. –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –•–≤–∞—Ç–∏—Ç')
        await state.set_state(AddTasks.title)
    else:
        await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è, –≤—ã –∏—Ö –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è')


@router.message(AddTasks.title)
async def create_tasks_state_handler(message: Message, state: FSMContext):
    global tasks_ls
    text = message.text.replace(' ', '_')
    if message.text not in tasks_ls:
        tasks_ls.append(text)
        await message.answer("üòâ–ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –•–≤–∞—Ç–∏—Ç", reply_markup=kb.stop_added_task_inlinekeyboard)
    else:
        await message.answer("‚ÄºÔ∏è–¢–æ—á–Ω–æ —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –•–≤–∞—Ç–∏—Ç", reply_markup=kb.stop_added_task_inlinekeyboard)

@router.callback_query(F.data == 'stop_add_task')
async def stop_add_task_handler(callback: CallbackQuery, state: FSMContext):
    global tasks_ls
    await callback.answer()
    await sql.create_new_table_sql(tasks_ls, callback.from_user.id)
    await callback.message.answer(f'‚úÖ–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π')
    await state.clear()


@router.message(F.text == '‚úèÔ∏è–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è')
async def execute_tasks_handler(message: Message, state: FSMContext):
    await state.clear()
    aval_tasks = await sql.availability_of_table(message.from_user.id)
    if aval_tasks == 'yes':
        data = await sql.get_today_tasks_sql(message.from_user.id)
        data = data[0]
        mes = f'üóì–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:\n{data[0]}\n\n'
        columns = await sql.get_all_columns_sql(message.from_user.id)
        columns = [column.replace('_', ' ') for column in columns]
        for d in range(1, len(data)):
            if data[d] == '0':
                mes += f'{d} {columns[d]} - ‚ùå\n'
            else: 
                mes += f'{d} {columns[d]} - ‚úÖ\n'
        
        mes += '\n‚ÄºÔ∏è–ß—Ç–æ–±—ã –∑–∞–¥–∞–Ω–∏–µ –≤—ã–¥–µ–ª–∏–ª–æ—Å—å –≥–∞–ª–æ—á–∫–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å –Ω–æ–º–µ—Ä–æ–º'
        await message.answer(mes, reply_markup=await kb.inline_number_task_kb(len(data)-1))
    else:
        await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö')


@router.callback_query(F.data.startswith('number_'))
async def change_state_task_handler(callback: CallbackQuery):
    await callback.answer()
    number = str(callback.data).replace('number_', '')
    await sql.change_state_task_sql(callback.from_user.id, number)

    data = await sql.get_today_tasks_sql(callback.from_user.id)
    data = data[0]
    mes = f'üóì–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:\n{data[0]}\n\n'
    columns = await sql.get_all_columns_sql(callback.from_user.id)
    columns = [column.replace('_', ' ') for column in columns]
    for d in range(1, len(data)):
        if data[d] == '0':
            mes += f'{d} {columns[d]} - ‚ùå\n'
        else: 
            mes += f'{d} {columns[d]} - ‚úÖ\n'

    mes += '\n‚ÄºÔ∏è–ß—Ç–æ–±—ã –∑–∞–¥–∞–Ω–∏–µ –≤—ã–¥–µ–ª–∏–ª–æ—Å—å –≥–∞–ª–æ—á–∫–æ–π –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –∫—Ä–µ—Å—Ç–∏–∫–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —É–∫–∞–∑–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ'
    await callback.message.edit_text(mes, reply_markup=await kb.inline_number_task_kb(len(data)-1))


@router.message(F.text == 'üìà–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def daily_statics_handler(message: Message, state: FSMContext):
    await state.clear()
    aval_tasks = await sql.availability_of_table(message.from_user.id)
    if aval_tasks == 'yes':
        daily_tasks = await sql.get_all_daily_tasks_sql(message.from_user.id)
        main_mes = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-1: -8: -1][::-1]:
            mes = f'–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(message.from_user.id)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{math.ceil(len(daily_tasks)/7)}/{math.ceil(len(daily_tasks)/7)}'
        
        await message.answer(main_mes, reply_markup=kb.inline_arroy_daily_tasks_kb)
    else:
        await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö')


@router.callback_query(F.data == 'arrow_left')
async def daily_statics_allow_left_handler(callback: CallbackQuery):
    await callback.answer()
    pages = str(callback.message.text).split()[-1].replace('/', ' ').split()
    current_n, total_n = int(pages[0]), int(pages[1])

    if current_n != 1:
        page_difference = total_n-current_n+1
        start_page = page_difference*7+1
        stop_page = start_page+7

        daily_tasks = await sql.get_all_daily_tasks_sql(callback.from_user.id)
        main_mes = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-start_page: -stop_page: -1][::-1]:
            mes = f'–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(callback.from_user.id)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{current_n-1}/{math.ceil(len(daily_tasks)/7)}'
        
        await callback.message.edit_text(main_mes, reply_markup=kb.inline_arroy_daily_tasks_kb)


@router.callback_query(F.data == 'arrow_right')
async def daily_statics_allow_right_handler(callback: CallbackQuery):
    await callback.answer()
    pages = str(callback.message.text).split()[-1].replace('/', ' ').split()
    current_n, total_n = int(pages[0]), int(pages[1])

    if total_n != current_n:
        page_difference = total_n-current_n+1
        start_page = page_difference*7-13
        stop_page = start_page+7

        daily_tasks = await sql.get_all_daily_tasks_sql(callback.from_user.id)
        main_mes = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-start_page: -stop_page: -1][::-1]:
            mes = f'–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(callback.from_user.id)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{current_n+1}/{math.ceil(len(daily_tasks)/7)}'
        
        await callback.message.edit_text(main_mes, reply_markup=kb.inline_arroy_daily_tasks_kb)


@router.message(F.text == 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def general_statistics_handler(message: Message, state: FSMContext):
    await state.clear()
    aval_tasks = await sql.availability_of_table(message.from_user.id)
    if aval_tasks == 'yes':
        data = await sql.get_all_daily_tasks_sql(message.from_user.id)
        columns = await sql.get_all_columns_sql(message.from_user.id)
        mes = '–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n\n'

        all_done_tasks = 0
        for i in range(len(data)):
            for j in range(len(data[i])):
                if j != 0:
                    all_done_tasks += int(data[i][j])
        mes += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {all_done_tasks}\n\n'

        for j in range(len(data[0])):
            if j == 0:
                continue
            total_task = 0
            shock_mode = 0
            for i in range(len(data)):
                total_task += int(data[i][j])

                if data[i][j] == '0':
                    shock_mode = 0
                else:
                    shock_mode += 1
            mes += f'–ó–∞–¥–∞–Ω–∏–µ "{str(columns[j]).replace('_', ' ')}":\n–°–¥–µ–ª–∞–Ω–æ –≤—Å–µ–≥–æ - {total_task}\n–£–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º - {shock_mode}\n\n'
        await message.answer(mes)
    else:
        await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö')


@router.message(F.text == 'üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è')
async def edit_tasks_handler(message: Message, state: FSMContext):
    await state.clear()
    aval_tasks = await sql.availability_of_table(message.from_user.id)
    if aval_tasks == 'yes':
        await message.answer('üåè–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –∑–∞–¥–∞–Ω–∏–µ, –≤–º–µ—Å—Ç–µ —Å —ç—Ç–∏–º, –∑–∞ –≤—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏, –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–æ, —á—Ç–æ –≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ\n\nüóë–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –∑–∞–¥–∞–Ω–∏–µ, –ø—Ä–∏ —ç—Ç–æ–º —É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–± —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏.\n\n', reply_markup=kb.edit_tasks_inline_kb)
    else:
        await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö')


@router.callback_query(F.data == 'add_task')
async def edit_task_add_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('‚ÄºÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')
    await state.set_state(AddOneTask.title)


@router.message(AddOneTask.title)
async def edit_task_add_state_handler(message: Message, state: FSMContext):
    await sql.add_one_column_sql(message.from_user.id, message.text.replace(' ', '_'))
    await message.answer(f'‚úÖ–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ "{message.text}"')
    await state.clear()


@router.callback_query(F.data == 'delete_task')
async def edit_task_delete_handler(callback: CallbackQuery):
    await callback.answer()
    data = await sql.get_today_tasks_sql(callback.from_user.id)
    data = data[0]
    mes = f'üìí–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è\n\n'
    columns = await sql.get_all_columns_sql(callback.from_user.id)
    columns = [column.replace('_', ' ') for column in columns]
    for d in range(1, len(data)):
        if data[d] == '0':
            mes += f'{d} {columns[d]}\n'
        else: 
            mes += f'{d} {columns[d]}\n'
    
    mes += '\n‚ÄºÔ∏è–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å –Ω–æ–º–µ—Ä–æ–º'
    await callback.message.answer(mes, reply_markup=await kb.delete_one_task_inline(len(data)-1))


@router.callback_query(F.data.startswith('deletetask_'))
async def edit_task_delete_state_handler(callback: CallbackQuery):
    await callback.answer()
    number = str(callback.data).split('_')
    number = int(number[1])
    columns = await sql.get_all_columns_sql(callback.from_user.id)
    await sql.delete_one_column_sql(callback.from_user.id, columns[number])
    await callback.message.delete()
    await callback.message.answer(f'‚úÖ–ó–∞–¥–∞–Ω–∏–µ "{str(columns[number]).replace('_', ' ')}" —É–¥–∞–ª–µ–Ω–æ')
    

@router.message(F.text == 'üôã‚Äç‚ôÇÔ∏è–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–≥–∞')
async def statistics_friend_handler(message: Message, state:FSMContext):
    await state.clear()
    await message.answer('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞')