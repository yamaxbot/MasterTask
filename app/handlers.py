from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice
from aiogram.filters import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram import Bot
from config import ADMINS

import math
import datetime

import app.database.sqlite_db as sql
import app.keyboards as kb
import app.other_func as otf


time_moscow = datetime.timezone(datetime.timedelta(hours=3))
router = Router()
tasks_sl = {}


class AddTask(StatesGroup):
    title = State()

class PasswordFriend(StatesGroup):
    password = State()


@router.message(Command('start'))
async def command_start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('üëã–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —É–ª—É—á—à–µ–Ω–∏–∏ –≤–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–∂–µ—Ç —É–¥–æ–±–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–Ω—è.\n\n‚òÑ–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n- –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–Ω—è\n- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n- –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n- –î–µ–ª–∏—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏\n- –°—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å\n\nüìã–ü–æ–¥—Ä–æ–±–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /help\n\n‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞(–∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥–∏) –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @TaskMasterSupportBot\n\nüë®‚Äçüíª–ù–∞—à –∫–∞–Ω–∞–ª, –≥–¥–µ –≤—ã—Ö–æ–¥—è—Ç —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ —ç—Ç–æ–≥–æ –±–æ—Ç–∞: @BestTaskMaster', reply_markup=kb.client_reply_keyboards)
    data = await sql.get_all_id_users_sql()
    if str(message.from_user.id) not in data:
        await sql.add_client_sql(message.from_user.id)
        await sql.create_new_table_sql(message.from_user.id)



@router.message(Command('help'))
async def command_help_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('üóí–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n‚è∞Ô∏è–í—Ä–µ–º—è:\n–í—Å—è —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤ —ç—Ç–æ–º –±–æ—Ç–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏(–ú–°–ö). –ü–æ—ç—Ç–æ–º—É –≤—ã–±–∏—Ä–∞—è –≤—Ä–µ–º—è –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö, –∏–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ –≤—Ä–µ–º—è —Ç–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ –ú–°–ö. –¢–∞–∫–∂–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –≤ –±–æ—Ç–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö.\n\nüìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è:\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —É–∂–µ –∏–º–µ—é—â–∏–µ—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, —Ç–æ –ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. –ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ —Ü–∏—Ñ—Ä—ã, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —Å—Ç–æ—è—Ç –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è.\n\n‚úè–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π:\n–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –≤—ã –º–æ–∂–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–¥–µ–ª–∞–ª–∏, —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≥–∞–ª–æ—á–∫–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ü–∏—Ñ—Ä–æ–π, –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫—Ä–µ—Å—Ç–∏–∫–æ–º, —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É —Ü–∏—Ñ—Ä—É.\n\nüìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≥–¥–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤—Å–µ–≥–æ, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–∫–∏–µ –¥–Ω–∏, –∫–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã –¥–µ–ª–∞–ª–∏, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n\nüôã‚Äç‚ôÇÔ∏è–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–≥–∞:\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–∞ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–≥–∞. –¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å –¥—Ä—É–≥–æ–º. –ê —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à–∏ –¥—Ä—É–∑—å—è –Ω–µ –º–æ–≥–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ –∫–æ–¥, —Ç–∞–∫ –æ–Ω–∏ –ø–æ—Ç–µ—Ä—è—é—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.\n\nüîî–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n–ß—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ –ú–°–ö!')



@router.message(F.text == '‚úèÔ∏è–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è')
async def execute_tasks_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()

    ls_channel = []
    sub_channels = await sql.get_all_username_channels_sql()

    for c in sub_channels:
        try:
            chat = await bot.get_chat(c)
            member = await bot.get_chat_member(chat_id=chat.id, user_id=message.from_user.id)
            if str(member.status) == 'ChatMemberStatus.LEFT':
                ls_channel.append(c)
        except:
            await bot.send_message(text=f'–° –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ {c} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', chat_id=ADMINS[0])

    if len(ls_channel) == 0:
        aval_tasks = await sql.availability_of_table(message.from_user.id)
        if aval_tasks == 'yes':
            data = await sql.get_today_tasks_sql(message.from_user.id)
            data = data[0]
            if len(data) > 1:
                mes = f'üóì–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:\n{data[0]}\n\n'
                columns = await sql.get_all_columns_sql(message.from_user.id)
                columns = [column.replace('_', ' ') for column in columns]
                for d in range(1, len(data)):
                    if data[d] == '0':
                        mes += f'{d} {columns[d]} - ‚ùå\n'
                    else:
                        mes += f'{d} {columns[d]} - ‚úÖ\n'
                
                mes += '\n‚ÄºÔ∏è–ß—Ç–æ–±—ã –∑–∞–¥–∞–Ω–∏–µ –≤—ã–¥–µ–ª–∏–ª–æ—Å—å –≥–∞–ª–æ—á–∫–æ–π –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –∫—Ä–µ—Å—Ç–∏–∫–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —É–∫–∞–∑–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ'
                await message.answer(mes, reply_markup=await kb.inline_number_task_kb(len(data)-1))
            else:
                await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π')
        else:
            await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è')
    else:
        sub_mes = 'üí•–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n'
        for i in range(len(ls_channel)):
            sub_mes += f'{i+1} {ls_channel[i]}\n'
        sub_mes += '\nüîÑ–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        await message.answer(sub_mes)



@router.message(F.text == 'üìà–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def daily_statics_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()

    ls_channel = []
    sub_channels = await sql.get_all_username_channels_sql()

    for c in sub_channels:
        try:
            chat = await bot.get_chat(c)
            member = await bot.get_chat_member(chat_id=chat.id, user_id=message.from_user.id)
            if str(member.status) == 'ChatMemberStatus.LEFT':
                ls_channel.append(c)
        except:
            await bot.send_message(text=f'–° –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ {c} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', chat_id=ADMINS[0])

    if len(ls_channel) == 0:
        aval_tasks = await sql.availability_of_table(message.from_user.id)
        if aval_tasks == 'yes':
            daily_tasks = await sql.get_all_daily_tasks_sql(message.from_user.id)
            main_mes = 'üìà–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
            for data in daily_tasks[-1: -8: -1][::-1]:
                mes = f'üóì–î–∞—Ç–∞:\n{data[0]}\n'
                columns = await sql.get_all_columns_sql(message.from_user.id)
                columns = [column.replace('_', ' ') for column in columns]
                for d in range(1, len(data)):
                    if data[d] == '0':
                        mes += f'{d} {columns[d]} - ‚ùå\n'
                    else: 
                        mes += f'{d} {columns[d]} - ‚úÖ\n'

                main_mes += mes + '\n\n'
            main_mes += f'{math.ceil(len(daily_tasks)/7)}/{math.ceil(len(daily_tasks)/7)}'
            
            await message.answer(main_mes, reply_markup=kb.inline_arroy_daily_tasks_kb)
        else:
            await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è')
    else:
        sub_mes = 'üí•–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n'
        for i in range(len(ls_channel)):
            sub_mes += f'{i+1} {ls_channel[i]}\n'
        sub_mes += '\nüîÑ–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        await message.answer(sub_mes)



@router.message(F.text == 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def general_statistics_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()

    ls_channel = []
    sub_channels = await sql.get_all_username_channels_sql()

    for c in sub_channels:
        try:
            chat = await bot.get_chat(c)
            member = await bot.get_chat_member(chat_id=chat.id, user_id=message.from_user.id)
            if str(member.status) == 'ChatMemberStatus.LEFT':
                ls_channel.append(c)
        except:
            await bot.send_message(text=f'–° –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ {c} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', chat_id=ADMINS[0])

    if len(ls_channel) == 0:
        time_moscow = datetime.timezone(datetime.timedelta(hours=3))
        today = str(datetime.datetime.now(time_moscow).date())
        aval_tasks = await sql.availability_of_table(message.from_user.id)
        if aval_tasks == 'yes':
            data = await sql.get_all_daily_tasks_sql(message.from_user.id)
            columns = await sql.get_all_columns_sql(message.from_user.id)
            mes = 'üìä–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n\n'

            all_done_tasks = 0
            for i in range(len(data)):
                for j in range(len(data[i])):
                    if j != 0:
                        all_done_tasks += int(data[i][j])
            mes += f'üåè–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {all_done_tasks}\n\n'

            for j in range(len(data[0])):
                if j == 0:
                    continue
                total_task = 0
                shock_mode = 0
                for i in range(len(data)):
                    total_task += int(data[i][j])

                    if data[i][0] == today:
                        shock_mode += 0
                        if data[i][j] == '1':
                            shock_mode += 1
                    elif data[i][j] == '0':
                        shock_mode = 0
                    else:
                        shock_mode += 1
                mes += f'{j} –ó–∞–¥–∞–Ω–∏–µ "{str(columns[j]).replace("_", " ")}":\n–°–¥–µ–ª–∞–Ω–æ –≤—Å–µ–≥–æ - {total_task}\n–£–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º - {shock_mode}\n\n'
            await message.answer(mes)
        else:
            await message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è')
    else:
        sub_mes = 'üí•–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n'
        for i in range(len(ls_channel)):
            sub_mes += f'{i+1} {ls_channel[i]}\n'
        sub_mes += '\nüîÑ–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        await message.answer(sub_mes)



@router.message(F.text == 'üìù–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è')
async def edit_tasks_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()

    ls_channel = []
    sub_channels = await sql.get_all_username_channels_sql()

    for c in sub_channels:
        try:
            chat = await bot.get_chat(c)
            member = await bot.get_chat_member(chat_id=chat.id, user_id=message.from_user.id)
            if str(member.status) == 'ChatMemberStatus.LEFT':
                ls_channel.append(c)
        except:
            await bot.send_message(text=f'–° –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ {c} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', chat_id=ADMINS[0])

    if len(ls_channel) == 0:
        await message.answer('üåè–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è.\n\nüóë–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –∑–∞–¥–∞–Ω–∏–µ, –ø—Ä–∏ —ç—Ç–æ–º —É–¥–∞–ª—è—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–± —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏.\n\n', reply_markup=kb.edit_tasks_inline_kb)
    else:
        sub_mes = 'üí•–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n'
        for i in range(len(ls_channel)):
            sub_mes += f'{i+1} {ls_channel[i]}\n'
        sub_mes += '\nüîÑ–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        await message.answer(sub_mes)



@router.message(F.text == 'üôã‚Äç‚ôÇÔ∏è–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä—É–≥–∞')
async def statistics_friend_handler(message: Message, state:FSMContext, bot: Bot):
    await state.clear()
    ls_channel = []
    sub_channels = await sql.get_all_username_channels_sql()

    for c in sub_channels:
        try:
            chat = await bot.get_chat(c)
            member = await bot.get_chat_member(chat_id=chat.id, user_id=message.from_user.id)
            if str(member.status) == 'ChatMemberStatus.LEFT':
                ls_channel.append(c)
        except:
            await bot.send_message(text=f'–° –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ {c} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', chat_id=ADMINS[0])

    if len(ls_channel) == 0:
        await message.answer('üîë–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –≤–∞—à –¥—Ä—É–≥ —Å–º–æ–≥ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\nüîê–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –¥—Ä—É–≥', reply_markup=kb.inline_friend_statistics_kb)
    else:
        sub_mes = 'üí•–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n'
        for i in range(len(ls_channel)):
            sub_mes += f'{i+1} {ls_channel[i]}\n'
        sub_mes += '\nüîÑ–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        await message.answer(sub_mes)



@router.message(F.text == 'üîî–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
async def reminder_main_handler(message: Message, state: FSMContext, bot: Bot):
    await state.clear()

    ls_channel = []
    sub_channels = await sql.get_all_username_channels_sql()

    for c in sub_channels:
        try:
            chat = await bot.get_chat(c)
            member = await bot.get_chat_member(chat_id=chat.id, user_id=message.from_user.id)
            if str(member.status) == 'ChatMemberStatus.LEFT':
                ls_channel.append(c)
        except:
            await bot.send_message(text=f'–° –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ {c} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', chat_id=ADMINS[0])

    if len(ls_channel) == 0:
        data = await sql.get_times_user_sql(message.from_user.id)
        if data[2] == '0':
            await message.answer('‚è∞Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\nüóë–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\nüìí–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', reply_markup=kb.inline_add_delete_reminder_kb)
        else:
            times = str(data[2]).replace('/', '\n')
            await message.answer(f'‚è∞Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\nüóë–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\nüìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:\n{times}', reply_markup=kb.inline_add_delete_reminder_kb)
    else:
        sub_mes = 'üí•–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n'
        for i in range(len(ls_channel)):
            sub_mes += f'{i+1} {ls_channel[i]}\n'
        sub_mes += '\nüîÑ–ï—Å–ª–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        await message.answer(sub_mes)



@router.callback_query(F.data.startswith('number_'))
async def change_state_task_handler(callback: CallbackQuery):
    mes_date = str(callback.message.text).split()
    today = str(datetime.datetime.now(time_moscow).date())

    if mes_date[2] == today:
        await callback.answer()
        number = str(callback.data).replace('number_', '')
        await sql.change_state_task_sql(callback.from_user.id, number)

        data = await sql.get_today_tasks_sql(callback.from_user.id)
        data = data[0]
        mes = f'üóì–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:\n{data[0]}\n\n'
        columns = await sql.get_all_columns_sql(callback.from_user.id)
        columns = [column.replace('_', ' ') for column in columns]
        for d in range(1, len(data)):
            if data[d] == '0':
                mes += f'{d} {columns[d]} - ‚ùå\n'
            else: 
                mes += f'{d} {columns[d]} - ‚úÖ\n'

        mes += '\n‚ÄºÔ∏è–ß—Ç–æ–±—ã –∑–∞–¥–∞–Ω–∏–µ –≤—ã–¥–µ–ª–∏–ª–æ—Å—å –≥–∞–ª–æ—á–∫–æ–π –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –∫—Ä–µ—Å—Ç–∏–∫–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —É–∫–∞–∑–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ'
        await callback.message.edit_text(mes, reply_markup=await kb.inline_number_task_kb(len(data)-1))
    else:
        await callback.answer(f'–≠—Ç–æ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª—ã—Ö –¥–Ω–µ–π, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è, –Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–Ω–æ–ø–∫—É –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è')



@router.callback_query(F.data == 'arrow_left')
async def daily_statics_allow_left_handler(callback: CallbackQuery):
    await callback.answer()
    pages = str(callback.message.text).split()[-1].replace('/', ' ').split()
    current_n, total_n = int(pages[0]), int(pages[1])

    if current_n != 1:
        page_difference = total_n-current_n+1
        start_page = page_difference*7+1
        stop_page = start_page+7

        daily_tasks = await sql.get_all_daily_tasks_sql(callback.from_user.id)
        main_mes = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-start_page: -stop_page: -1][::-1]:
            mes = f'–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(callback.from_user.id)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{current_n-1}/{math.ceil(len(daily_tasks)/7)}'
        
        await callback.message.edit_text(main_mes, reply_markup=kb.inline_arroy_daily_tasks_kb)



@router.callback_query(F.data == 'arrow_right')
async def daily_statics_allow_right_handler(callback: CallbackQuery):
    await callback.answer()
    pages = str(callback.message.text).split()[-1].replace('/', ' ').split()
    current_n, total_n = int(pages[0]), int(pages[1])

    if total_n != current_n:
        page_difference = total_n-current_n+1
        start_page = page_difference*7-13
        stop_page = start_page+7

        daily_tasks = await sql.get_all_daily_tasks_sql(callback.from_user.id)
        main_mes = '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-start_page: -stop_page: -1][::-1]:
            mes = f'–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(callback.from_user.id)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{current_n+1}/{math.ceil(len(daily_tasks)/7)}'
        
        await callback.message.edit_text(main_mes, reply_markup=kb.inline_arroy_daily_tasks_kb)



@router.callback_query(F.data == 'add_task')
async def edit_task_add_handler(callback: CallbackQuery, state: FSMContext):
    global tasks_sl
    await state.clear()
    tasks_sl[callback.from_user.id] = []
    await callback.answer()
    await callback.message.answer('‚ÄºÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –ü–∏—à–∏—Ç–µ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é', reply_markup=kb.inline_cancel_kb)
    await state.set_state(AddTask.title)



@router.message(AddTask.title)
async def edit_task_add_state_handler(message: Message, state: FSMContext):
    global tasks_sl
    columns = await sql.get_all_columns_sql(message.from_user.id)
    text = message.text.replace(' ', '_')
    if text not in columns and text not in tasks_sl[message.from_user.id]:
        await message.answer('‚úç–ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Ö–≤–∞—Ç–∏—Ç', reply_markup=kb.stop_added_task_inlinekeyboard)
        new_tasks = list(tasks_sl[message.from_user.id])
        new_tasks.append(text)
        tasks_sl[message.from_user.id] = new_tasks
    else:
        await message.answer('‚ÄºÔ∏è–¢–æ—á–Ω–æ —Ç–∞–∫–æ–µ–∂–µ –∑–∞–¥–∞–Ω–∏–µ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –•–≤–∞—Ç–∏—Ç', reply_markup=kb.inline_cancel_kb)



@router.callback_query(F.data == 'stop_add_task')
async def stop_add_task_handler(callback: CallbackQuery, state: FSMContext):
    global tasks_sl
    await callback.answer()
    await state.clear()

    if callback.from_user.id in tasks_sl.keys() and len(tasks_sl[callback.from_user.id]) != 0:
        await sql.add_columns_sql(callback.from_user.id, tasks_sl[callback.from_user.id])
        await callback.message.answer(f'‚úÖ–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è')
        del tasks_sl[callback.from_user.id]



@router.callback_query(F.data == 'delete_task')
async def edit_task_delete_handler(callback: CallbackQuery):
    await callback.answer()
    aval_tasks = await sql.availability_of_table(callback.from_user.id)
    if aval_tasks == 'yes':
        data = await sql.get_today_tasks_sql(callback.from_user.id)
        data = data[0]
        mes = f'üìí–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è\n\n'
        columns = await sql.get_all_columns_sql(callback.from_user.id)
        columns = [column.replace('_', ' ') for column in columns]
        for d in range(1, len(data)):
            if data[d] == '0':
                mes += f'{d} {columns[d]}\n'
            else: 
                mes += f'{d} {columns[d]}\n'
        
        mes += '\n‚ÄºÔ∏è–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å –Ω–æ–º–µ—Ä–æ–º'
        await callback.message.answer(mes, reply_markup=await kb.delete_one_task_inline(len(data)-1))
    else:
        await callback.message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –∏—Ç–∞–∫ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏—Ö –Ω–∞–∂–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è')



@router.callback_query(F.data.startswith('deletetask_'))
async def edit_task_delete_state_handler(callback: CallbackQuery):
    await callback.answer()
    number = str(callback.data).split('_')
    number = int(number[1])
    columns = await sql.get_all_columns_sql(callback.from_user.id)
    await sql.delete_one_column_sql(callback.from_user.id, columns[number])
    await callback.message.delete()
    await callback.message.answer(f"‚úÖ–ó–∞–¥–∞–Ω–∏–µ {str(columns[number]).replace('_', ' ')} —É–¥–∞–ª–µ–Ω–æ")
    
    aval_tasks = await sql.availability_of_table(callback.from_user.id)
    if aval_tasks == 'yes':
        data = await sql.get_today_tasks_sql(callback.from_user.id)
        data = data[0]
        mes = f'üìí–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è\n\n'
        columns = await sql.get_all_columns_sql(callback.from_user.id)
        columns = [column.replace('_', ' ') for column in columns]
        for d in range(1, len(data)):
            if data[d] == '0':
                mes += f'{d} {columns[d]}\n'
            else: 
                mes += f'{d} {columns[d]}\n'
        
        mes += '\n‚ÄºÔ∏è–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Å –Ω–æ–º–µ—Ä–æ–º'
        await callback.message.answer(mes, reply_markup=await kb.delete_one_task_inline(len(data)-1))
    else:
        await callback.message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è')



@router.callback_query(F.data == 'cancel')
async def cancel_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')



@router.callback_query(F.data == 'my_code')
async def my_code_callback_handler(callback: CallbackQuery):
    await callback.answer()
    data = await sql.get_user_friend_statistics_sql(callback.from_user.id)
    if data == None:
        await callback.message.answer('üîë–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–¥–∞. –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥', reply_markup=kb.inline_create_delete_code_kb)
    else:
        await callback.message.answer(f'üîë–í–∞—à –∫–æ–¥: `{data[1]}`\nü´µ–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –Ω–µ–º—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n\nüîì–õ—é–±–æ–π –∫–æ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥, —Å–º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\nüóë–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–¥, —á—Ç–æ–±—ã –≤–∞—à–∏ –¥—Ä—É–∑—å—è –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –£–¥–∞–ª–∏—Ç—å –∫–æ–¥', reply_markup=kb.inline_create_delete_code_kb,parse_mode="MARKDOWN")



@router.callback_query(F.data == 'create_code')
async def create_code_handler(callback: CallbackQuery):
    await callback.answer()
    data = await sql.get_user_friend_statistics_sql(callback.from_user.id)
    if data == None:
        all_code = await sql.get_all_friends_codes_sql()
        while True:
            code = await otf.generation_code()
            if code not in all_code:
                await sql.add_code_friend_statistics_sql(callback.from_user.id, code)
                await callback.message.edit_text(f'üîë–í–∞—à –∫–æ–¥: `{code}`\nü´µ–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –Ω–µ–º—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n\nüîì–õ—é–±–æ–π –∫–æ–º—É –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥, —Å–º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\nüóë–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–¥, —á—Ç–æ–±—ã –≤–∞—à–∏ –¥—Ä—É–∑—å—è –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –£–¥–∞–ª–∏—Ç—å –∫–æ–¥', reply_markup=kb.inline_create_delete_code_kb, parse_mode="MARKDOWN")
                break
    else:
        await callback.message.answer('‚ÄºÔ∏è–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–¥')



@router.callback_query(F.data == 'delete_code')
async def delete_code_handler(callback: CallbackQuery):
    await callback.answer()
    data = await sql.get_user_friend_statistics_sql(callback.from_user.id)
    if data == None:
        await callback.message.answer('‚ÄºÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–¥–∞')
    else:
        await sql.not_active_code_friend_statistics_sql(callback.from_user.id)
        await callback.message.edit_text('üîë–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–¥–∞. –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥', reply_markup=kb.inline_create_delete_code_kb)
        


@router.callback_query(F.data == 'friend_code')
async def friend_code_state_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('üîë–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –¥—Ä—É–≥–∞')
    await state.set_state(PasswordFriend.password)



@router.message(PasswordFriend.password)
async def friend_code_state_password_handler(message: Message, state: FSMContext):
    all_codes = await sql.get_all_friends_codes_sql()
    if message.text in all_codes:
        id_by_code = await sql.get_id_by_password_sql(message.text)

        if str(message.from_user.id) == id_by_code:
            await message.answer('‚ÄºÔ∏è–≠—Ç–æ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∏—Ç—å!')
        elif message.text in all_codes:
            await message.answer(f'üîê–ö–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏: `{message.text}`\n\nüôã‚Äç‚ôÇÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å 2 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞', reply_markup=kb.inline_friend_statistics_all_kb, parse_mode="MARKDOWN")
            await state.clear()
    else:
        await message.answer('‚ÄºÔ∏è–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å', reply_markup=kb.inline_cancel_kb)



@router.callback_query(F.data == 'general_statistics')
async def general_statistics_friend_handler(callback: CallbackQuery):
    await callback.answer()
    time_moscow = datetime.timezone(datetime.timedelta(hours=3))
    today = str(datetime.datetime.now(time_moscow).date())
    friend_password = list(str(callback.message.text).split())
    id_user = await sql.get_id_by_password_sql(friend_password[4])

    aval_tasks = await sql.availability_of_table(id_user)
    if aval_tasks == 'yes':
        data = await sql.get_all_daily_tasks_sql(id_user)
        columns = await sql.get_all_columns_sql(id_user)
        mes = 'üìäC—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n\n'

        all_done_tasks = 0
        for i in range(len(data)):
            for j in range(len(data[i])):
                if j != 0:
                    all_done_tasks += int(data[i][j])
        mes += f'üåè–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {all_done_tasks}\n\n'

        for j in range(len(data[0])):
            if j == 0:
                continue
            total_task = 0
            shock_mode = 0
            for i in range(len(data)):
                total_task += int(data[i][j])

                if data[i][0] == today:
                    shock_mode += 0
                    if data[i][j] == '1':
                        shock_mode += 1
                elif data[i][j] == '0':
                    shock_mode = 0
                else:
                    shock_mode += 1

            mes += f'{j} –ó–∞–¥–∞–Ω–∏–µ "{str(columns[j]).replace("_", " ")}":\n–°–¥–µ–ª–∞–Ω–æ –≤—Å–µ–≥–æ - {total_task}\n–£–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º - {shock_mode}\n\n'
        await callback.message.answer(mes)
    else:
        await callback.message.answer('‚ÄºÔ∏è–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π')



@router.callback_query(F.data == 'default_statistics')
async def daily_statics_friend_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    friend_password = list(str(callback.message.text).split())
    id_user = await sql.get_id_by_password_sql(friend_password[4])
    aval_tasks = await sql.availability_of_table(id_user)

    if aval_tasks == 'yes':
        daily_tasks = await sql.get_all_daily_tasks_sql(id_user)
        main_mes = f'üîê–ö–æ–¥ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞: {friend_password[4]}\n\nüìà–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-1: -8: -1][::-1]:
            mes = f'üóì–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(id_user)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{math.ceil(len(daily_tasks)/7)}/{math.ceil(len(daily_tasks)/7)}'
        
        await callback.message.answer(main_mes, reply_markup=kb.inline_arroy_daily_tasks_friend_kb)
    else:
        await callback.message.answer('‚ÄºÔ∏è–£ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è')



@router.callback_query(F.data == 'arrow_left_friend')
async def daily_statics_friend_allow_left_handler(callback: CallbackQuery):
    await callback.answer()
    pages = str(callback.message.text).split()[-1].replace('/', ' ').split()
    current_n, total_n = int(pages[0]), int(pages[1])
    code = list(str(callback.message.text).split())[3]
    id_user = await sql.get_id_by_password_sql(code)

    if current_n != 1:
        page_difference = total_n-current_n+1
        start_page = page_difference*7+1
        stop_page = start_page+7

        daily_tasks = await sql.get_all_daily_tasks_sql(id_user)
        main_mes = f'üîê–ö–æ–¥ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞: {code}\n\nüìà–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-start_page: -stop_page: -1][::-1]:
            mes = f'–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(id_user)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{current_n-1}/{math.ceil(len(daily_tasks)/7)}'
        
        await callback.message.edit_text(main_mes, reply_markup=kb.inline_arroy_daily_tasks_friend_kb)



@router.callback_query(F.data == 'arrow_right_friend')
async def daily_statics_friend_allow_right_handler(callback: CallbackQuery):
    await callback.answer()
    pages = str(callback.message.text).split()[-1].replace('/', ' ').split()
    current_n, total_n = int(pages[0]), int(pages[1])
    code = list(str(callback.message.text).split())[3]
    id_user = await sql.get_id_by_password_sql(code)

    if total_n != current_n:
        page_difference = total_n-current_n+1
        start_page = page_difference*7-13
        stop_page = start_page+7

        daily_tasks = await sql.get_all_daily_tasks_sql(id_user)
        main_mes = f'üîê–ö–æ–¥ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞: {code}\n\nüìà–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n'
        for data in daily_tasks[-start_page: -stop_page: -1][::-1]:
            mes = f'–î–∞—Ç–∞:\n{data[0]}\n'
            columns = await sql.get_all_columns_sql(id_user)
            columns = [column.replace('_', ' ') for column in columns]
            for d in range(1, len(data)):
                if data[d] == '0':
                    mes += f'{d} {columns[d]} - ‚ùå\n'
                else: 
                    mes += f'{d} {columns[d]} - ‚úÖ\n'

            main_mes += mes + '\n\n'
        main_mes += f'{current_n+1}/{math.ceil(len(daily_tasks)/7)}'
        
        await callback.message.edit_text(main_mes, reply_markup=kb.inline_arroy_daily_tasks_friend_kb)



@router.callback_query(F.data == 'edit_time')
async def edit_time_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    count_colon = str(callback.message.text).count(':')
    if count_colon == 0:
        await callback.message.answer('üë®‚Äçüíª–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑ –∏ –æ–Ω–æ —É–¥–∞–ª–∏—Ç—Å—è\n\nüìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:', reply_markup=kb.inline_all_times_reminder_kb)
    else:
        times_data = str(callback.message.text).split('üìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:')
        await callback.message.answer(f'üë®‚Äçüíª–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑ –∏ –æ–Ω–æ —É–¥–∞–ª–∏—Ç—Å—è\n\nüìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:{times_data[1]}', reply_markup=kb.inline_all_times_reminder_kb)
    await callback.message.delete()



@router.callback_query(F.data.startswith('remtime_'))
async def edit_time_callback_handler(callback: CallbackQuery):
    await callback.answer()
    callback_time = list(str(callback.data).split('_'))[1]
    callback_time = callback_time[:2] + ':' + callback_time[2:]
    
    mes_split = str(callback.message.text).split('üìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:')
    times_data = mes_split[1].split('\n')
    del times_data[0]
    if callback_time not in times_data:
        text = callback.message.text + '\n' + callback_time
        await callback.message.edit_text(text=text, reply_markup=kb.inline_all_times_reminder_kb)
    else:
        ind_callback_time = times_data.index(callback_time)
        del times_data[ind_callback_time]
        text = mes_split[0] + 'üìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:' + '\n' + '\n'.join(times_data)
        await callback.message.edit_text(text=text, reply_markup=kb.inline_all_times_reminder_kb)



@router.callback_query(F.data == 'save_time')
async def add_time_stop_state_handler(callback: CallbackQuery):
    await callback.answer()
    times = list(str(callback.message.text).split('üìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:'))[1]
    if times == '':
        await sql.add_times_user_sql(callback.from_user.id, '0')
        await callback.message.delete()
        await callback.message.answer('‚è∞Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\nüóë–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\nüìí–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', reply_markup=kb.inline_add_delete_reminder_kb)
        await callback.message.answer('‚úÖ–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
    else:
        times = times.replace('\n', '/')
        times = times[1:]
        await sql.add_times_user_sql(callback.from_user.id, times)
        await callback.message.delete()
        
        data = await sql.get_times_user_sql(callback.from_user.id)
        times = str(data[2]).replace('/', '\n')
        await callback.message.answer(f'‚è∞Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\nüóë–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\nüìí–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞—é—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö:\n{times}', reply_markup=kb.inline_add_delete_reminder_kb)
            
        await callback.message.answer('‚úÖ–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')